import mysql.connector
from config import DB_CONFIG


def alter_tasks_table():
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()

        # p≈ôidej sloupec assigned_to pokud neexistuje
        cursor.execute("""
            ALTER TABLE tasks
            ADD COLUMN assigned_to INT DEFAULT NULL
        """)

        # p≈ôidej ciz√≠ kl√≠ƒç
        cursor.execute("""
            ALTER TABLE tasks
            ADD CONSTRAINT fk_assigned_to
            FOREIGN KEY (assigned_to) REFERENCES workers(id)
            ON DELETE SET NULL
            ON UPDATE CASCADE
        """)

        conn.commit()
        cursor.close()
        conn.close()
        print("Tabulka tasks byla aktualizov√°na.")
    except mysql.connector.Error as err:
        print(f"Chyba p≈ôi aktualizaci tabulky: {err}")


#

def alter_tasks_set_not_null():
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()

        # Z√≠sk√°n√≠ prvn√≠ho dostupn√©ho ID pracovn√≠ka
        cursor.execute("SELECT id FROM workers LIMIT 1;")
        result = cursor.fetchone()
        if not result:
            print("‚ùå V tabulce 'workers' nen√≠ ≈æ√°dn√Ω z√°znam. P≈ôidej aspo≈à jednoho pracovn√≠ka.")
            return
        default_worker_id = result[0]

        # Oprava NULL hodnot
        print("üõ†Ô∏è Opravujeme NULL hodnoty...")
        cursor.execute("UPDATE tasks SET title = '' WHERE title IS NULL;")
        cursor.execute("UPDATE tasks SET description = '' WHERE description IS NULL;")
        cursor.execute("UPDATE tasks SET image_path = '' WHERE image_path IS NULL;")
        cursor.execute("UPDATE tasks SET assigned_to = %s WHERE assigned_to IS NULL;", (default_worker_id,))

        # Zmƒõna sch√©matu tabulky na NOT NULL
        print("üîß Prov√°d√≠me ALTER TABLE...")
        cursor.execute("ALTER TABLE tasks MODIFY COLUMN title VARCHAR(255) NOT NULL;")
        cursor.execute("ALTER TABLE tasks MODIFY COLUMN description TEXT NOT NULL;")
        cursor.execute("ALTER TABLE tasks MODIFY COLUMN image_path VARCHAR(255) NOT NULL;")
        cursor.execute("ALTER TABLE tasks MODIFY COLUMN assigned_to INT NOT NULL;")

        conn.commit()
        cursor.close()
        conn.close()
        print("‚úÖ Tabulka 'tasks' byla √∫spƒõ≈°nƒõ upravena na NOT NULL.")

    except mysql.connector.Error as err:
        print(f"‚ùå Chyba p≈ôi aktualizaci tabulky: {err}")


def insert_default_workers():
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()

        workers = ['Petr', 'Matƒõj', 'Ta≈•ka', 'Ondra']
        for name in workers:
            cursor.execute("INSERT INTO workers (name) VALUES (%s)", (name,))

        conn.commit()
        cursor.close()
        conn.close()
        print("‚úÖ V√Ωchoz√≠ pracovn√≠ci byli vlo≈æeni do tabulky 'workers'.")

    except mysql.connector.Error as err:
        print(f"‚ùå Chyba p≈ôi vkl√°d√°n√≠ pracovn√≠k≈Ø: {err}")


def assign_all_tasks_to_petr():
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()

        # Zjisti ID pracovn√≠ka s n√°zvem "Petr"
        cursor.execute("SELECT id FROM workers WHERE name = %s", ("Petr",))
        result = cursor.fetchone()

        if not result:
            print("‚ùå Pracovn√≠k 'Petr' nebyl nalezen.")
            return

        petr_id = result[0]

        # Nastav v≈°echny √∫koly na tohoto pracovn√≠ka
        cursor.execute("UPDATE tasks SET assigned_to = %s", (petr_id,))
        conn.commit()

        cursor.close()
        conn.close()
        print("‚úÖ V≈°echny √∫koly byly p≈ôi≈ôazeny Petrovi.")

    except mysql.connector.Error as err:
        print(f"‚ùå Chyba p≈ôi p≈ôi≈ôazov√°n√≠: {err}")


def delete_workers_by_id_range(start_id=5, end_id=12):
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM workers WHERE id BETWEEN %s AND %s", (start_id, end_id))
        conn.commit()
        cursor.close()
        conn.close()
        print(f"‚úÖ Pracovn√≠ci s ID od {start_id} do {end_id} byli odstranƒõni.")
    except mysql.connector.Error as err:
        print(f"‚ùå Chyba p≈ôi maz√°n√≠ pracovn√≠k≈Ø: {err}")


def alter_tables_add_datum_and_vek():
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()

        # P≈ôid√°n√≠ sloupce 'datum' do tabulky tasks
        try:
            cursor.execute("""
                ALTER TABLE tasks
                ADD COLUMN datum DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
            """)
            print("‚úÖ Sloupec 'datum' p≈ôid√°n do 'tasks'.")
        except mysql.connector.Error as e:
            print("‚ÑπÔ∏è Sloupec 'datum' u≈æ pravdƒõpodobnƒõ existuje:", e)

        # P≈ôid√°n√≠ sloupce 'vek' do tabulky workers
        try:
            cursor.execute("""
                ALTER TABLE workers
                ADD COLUMN vek INT
            """)
            print("‚úÖ Sloupec 'vek' p≈ôid√°n do 'workers'.")
        except mysql.connector.Error as e:
            print("‚ÑπÔ∏è Sloupec 'vek' u≈æ pravdƒõpodobnƒõ existuje:", e)

        conn.commit()
        cursor.close()
        conn.close()

    except mysql.connector.Error as err:
        print(f"‚ùå Chyba p≈ôi ALTER TABLE: {err}")



if __name__ == "__main__":
    alter_tables_add_datum_and_vek()
    # delete_workers_by_id_range()
    # insert_default_workers()
    # assign_all_tasks_to_petr()
    # alter_tasks_set_not_null()
    # alter_tasks_table()
